'use strict'

const express = require('express')
const bodyParser = require('body-parser')
const request = require('request')
const fs = require('fs')
const csv = require('csv-parser')
const app = express()

// Global variable to store location data
let locationData = []

// Comprehensive district and thana mapping with spelling variations
const districtMapping = {
	// Bengali to English
	'‡¶¢‡¶æ‡¶ï‡¶æ': ['dhaka'],
	'‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ': ['chattogram', 'chittagong'],
	'‡¶®‡¶æ‡¶∞‡¶æ‡¶Ø‡¶º‡¶£‡¶ó‡¶û‡ßç‡¶ú': ['narayanganj'],
	'‡¶ó‡¶æ‡¶ú‡ßÄ‡¶™‡ßÅ‡¶∞': ['gazipur'],
	'‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ': ['khulna'],
	'‡¶ï‡ßÅ‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ': ['cumilla', 'comilla'],
	'‡¶¨‡¶ó‡ßÅ‡¶°‡¶º‡¶æ': ['bogura', 'bogra'],
	'‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ': ['rajshahi'],
	'‡¶Ø‡¶∂‡ßã‡¶∞': ['jashore', 'jessore'],
	'‡¶®‡¶æ‡¶ü‡ßã‡¶∞': ['natore'],
	'‡¶®‡¶ì‡¶ó‡¶æ‡¶Å': ['naogaon'],
	'‡¶´‡ßá‡¶®‡ßÄ': ['feni'],
	'‡¶ú‡¶æ‡¶Æ‡¶æ‡¶≤‡¶™‡ßÅ‡¶∞': ['jamalpur'],
	'‡¶Æ‡¶æ‡¶®‡¶ø‡¶ï‡¶ó‡¶û‡ßç‡¶ú': ['manikganj'],
	'‡¶´‡¶∞‡¶ø‡¶¶‡¶™‡ßÅ‡¶∞': ['faridpur'],
	'‡¶™‡¶æ‡¶¨‡¶®‡¶æ': ['pabna'],
	'‡¶®‡ßÄ‡¶≤‡¶´‡¶æ‡¶Æ‡¶æ‡¶∞‡ßÄ': ['nilphamari'],
	'‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤': ['barishal', 'barisal'],
	'‡¶ï‡¶ï‡ßç‡¶∏‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞': ['coxsbazar', 'cox\'s bazar'],
	'‡¶Æ‡ßÅ‡¶®‡ßç‡¶∏‡¶ø‡¶ó‡¶û‡ßç‡¶ú': ['munshiganj'],
	
	// English variations
	'jashore': ['jashore', 'jessore'],
	'jessore': ['jashore', 'jessore'],
	'chattogram': ['chattogram', 'chittagong'],
	'chittagong': ['chattogram', 'chittagong'],
	'cumilla': ['cumilla', 'comilla'],
	'comilla': ['cumilla', 'comilla'],
	'bogura': ['bogura', 'bogra'],
	'bogra': ['bogura', 'bogra'],
	'barishal': ['barishal', 'barisal'],
	'barisal': ['barishal', 'barisal'],
	
	// Common thana names
	'mirpur': ['pallabi'],
	'‡¶Æ‡¶ø‡¶∞‡¶™‡ßÅ‡¶∞': ['pallabi'],
	'pallabi': ['pallabi'],
	'‡¶™‡¶≤‡ßç‡¶≤‡¶¨‡ßÄ': ['pallabi'],
	'jatrabari': ['jatrabari'],
	'‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡¶æ‡¶¨‡¶æ‡¶°‡¶º‡ßÄ': ['jatrabari'],
	'‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡¶æ‡¶¨‡¶æ‡¶°‡¶º‡¶ø': ['jatrabari'],
	'keraniganj': ['keraniganj'],
	'‡¶ï‡ßá‡¶∞‡¶æ‡¶®‡ßÄ‡¶ó‡¶û‡ßç‡¶ú': ['keraniganj'],
	'savar': ['savar'],
	'‡¶∏‡¶æ‡¶≠‡¶æ‡¶∞': ['savar'],
	'khilkhet': ['khilkhet'],
	'‡¶ñ‡¶ø‡¶≤‡¶ï‡ßç‡¶∑‡ßá‡¶§': ['khilkhet'],
	'lalbag': ['lalbag'],
	'‡¶≤‡¶æ‡¶≤‡¶¨‡¶æ‡¶ó': ['lalbag'],
	'kotwali': ['kotwali'],
	'‡¶ï‡ßã‡¶§‡¶Ø‡¶º‡¶æ‡¶≤‡ßÄ': ['kotwali'],
	'khilgaon': ['khilgaon'],
	'‡¶ñ‡¶ø‡¶≤‡¶ó‡¶æ‡¶Å‡¶ì': ['khilgaon'],
	'kadamtoli': ['kadamtoli'],
	'‡¶ï‡¶¶‡¶Æ‡¶§‡¶≤‡ßÄ': ['kadamtoli'],
	'demra': ['demra'],
	'‡¶°‡ßá‡¶Æ‡¶∞‡¶æ': ['demra'],
	'gulshan': ['gulshan'],
	'‡¶ó‡ßÅ‡¶≤‡¶∂‡¶æ‡¶®': ['gulshan'],
	'vatara': ['vatara'],
	'‡¶≠‡¶æ‡¶ü‡¶æ‡¶∞‡¶æ': ['vatara'],
	'sutrapur': ['sutrapur'],
	'‡¶∏‡ßÅ‡¶§‡ßç‡¶∞‡¶æ‡¶™‡ßÅ‡¶∞': ['sutrapur'],
	'kamrangirchor': ['kamrangirchor'],
	'‡¶ï‡¶æ‡¶Æ‡¶∞‡¶æ‡¶ô‡ßç‡¶ó‡ßÄ‡¶∞‡¶ö‡¶∞': ['kamrangirchor'],
	
	// Additional locations that appear in addresses
	'‡¶â‡¶≤‡ßÅ‡¶ï‡¶æ‡¶®‡ßç‡¶¶‡¶ø': ['habiganj', 'hobiganj'],
	'ulukandi': ['habiganj', 'hobiganj'],
	'‡¶Ü‡¶â‡¶∏‡¶ï‡¶æ‡¶®‡ßç‡¶¶‡¶ø': ['habiganj', 'hobiganj'],
	'aushkandi': ['habiganj', 'hobiganj'],
	'habiganj': ['habiganj', 'hobiganj'],
	'‡¶π‡¶¨‡¶ø‡¶ó‡¶û‡ßç‡¶ú': ['habiganj', 'hobiganj'],
	'nabiganj': ['nabiganj'],
	'‡¶®‡¶¨‡¶ø‡¶ó‡¶û‡ßç‡¶ú': ['nabiganj'],
	
	// Additional districts
	'‡¶ï‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø‡¶Ø‡¶º‡¶æ': ['kushtia'],
	'‡¶ï‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø‡ßü‡¶æ': ['kushtia'],
	'kushtia': ['kushtia']
}

// Facebook Page Access Token
const token = 'EAAPKDQxpu94BPKD8cvahCt5b1r01WkSaj6WTZBlSJkfbgoxiZBKL7ExPZAZCVLaNdkfy6ZBXn1c4TWZBpJ0ZA3v5RlrPqpoToGIxFoO0PDcihlROoMr2IZC1CXzxGE0MgQGWjmHUyytOcZAWUSexapMaLEzdzgpJyAKlzExv3J9C3KBcwosEqWmvM6i45UqCohOeoP1z4yMd4tgZDZD'

app.set('port', (process.env.PORT || 5000))

// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({extended: false}))

// parse application/json
app.use(bodyParser.json())

// Load CSV data on startup
function loadLocationData() {
	fs.createReadStream('Coverage SHAKTI.csv')
		.pipe(csv())
		.on('data', (row) => {
			locationData.push(row)
		})
		.on('end', () => {
			console.log('Location data loaded successfully:', locationData.length, 'records')
		})
		.on('error', (error) => {
			console.error('Error loading CSV:', error)
		})
}

// Function to search locations by district or upazila
function searchLocations(searchTerm) {
	const results = []
	const searchLower = searchTerm.toLowerCase()

	// Get all possible search terms for this input
	let searchTerms = [searchLower]

	// If it's a known district, get all its variations
	if (districtMapping[searchTerm]) {
		searchTerms = districtMapping[searchTerm]
	} else if (districtMapping[searchLower]) {
		searchTerms = districtMapping[searchLower]
	}

	console.log('Searching for terms:', searchTerms)

	locationData.forEach(location => {
		const district = location.District ? location.District.toLowerCase() : ''
		const thana = location.Thana ? location.Thana.toLowerCase() : ''
		const address = location.Address ? location.Address.toLowerCase() : ''

		// Check if any search term matches district, thana, or address
		for (let term of searchTerms) {
			if (district === term || thana === term || address.includes(term)) {
				results.push(location)
				break // Don't add the same location twice
			}
		}
	})

	console.log('Found', results.length, 'results for:', searchTerm)
	return results
}

// Function to format location results with pagination
function formatLocationResults(locations) {
	if (locations.length === 0) {
		return "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶ï‡ßã‡¶® ‡¶∂‡¶æ‡¶ñ‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®‡•§"
	}
	
	// Split locations into chunks of 5 per message
	const chunks = []
	for (let i = 0; i < locations.length; i += 5) {
		chunks.push(locations.slice(i, i + 5))
	}
	
	return chunks.map((chunk, chunkIndex) => {
		let message = chunkIndex === 0 ? 
			`üìç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∂‡¶æ‡¶ñ‡¶æ‡¶∏‡¶Æ‡ßÇ‡¶π (${locations.length}‡¶ü‡¶ø):\n\n` :
			`üìç ‡¶∂‡¶æ‡¶ñ‡¶æ‡¶∏‡¶Æ‡ßÇ‡¶π (‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶Ö‡¶Ç‡¶∂):\n\n`
		
		chunk.forEach((location, index) => {
			const globalIndex = chunkIndex * 5 + index + 1
			message += `${globalIndex}‡•§ ${location['Branch Name']}\n`
			message += `üìç ${location.Address}\n`
			message += `üìû ${location['Phone Number']}\n\n`
		})
		
						if (chunkIndex === chunks.length - 1) {
					message += "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ï‡¶ü‡¶∏‡ßç‡¶• ‡¶≤‡ßã‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§"
				}
		
		return message
	})
}

// index
app.get('/', function (req, res) {
	res.send('Shakti Foundation Bot is running! ü§ñüí∞')
})

// for facebook verification
app.get('/webhook/', function (req, res) {
	console.log('Webhook verification request received')
	
	if (req.query['hub.mode'] === 'subscribe' && req.query['hub.verify_token'] === 'my_voice_is_my_password_verify_me') {
		console.log('Webhook verified successfully')
		res.status(200).send(req.query['hub.challenge'])
	} else {
		console.log('Webhook verification failed')
		res.status(403).send('Error, wrong token')
	}
})

// to post data
app.post('/webhook/', function (req, res) {
	console.log('Webhook POST received:', JSON.stringify(req.body, null, 2))
	
	if (req.body.object === 'page') {
		req.body.entry.forEach(function(entry) {
			entry.messaging.forEach(function(event) {
				console.log('Processing message from:', event.sender.id)
				
				if (event.message && event.message.text) {
					let text = event.message.text
					console.log('Received text:', text)
					
					// Check if this is a location search
					const searchResults = searchLocations(text)
					if (searchResults.length > 0) {
						// This is a location search
						const locationMessages = formatLocationResults(searchResults)
						
						// Send multiple messages if there are chunks
						if (Array.isArray(locationMessages)) {
							locationMessages.forEach((message, index) => {
								setTimeout(() => {
									sendTextMessage(event.sender.id, message)
								}, index * 1000) // Send each message with 1 second delay
							})
						} else {
							sendTextMessage(event.sender.id, locationMessages)
						}
					} else {
						// This is not a location search, send error message
						sendTextMessage(event.sender.id, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶Æ‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶õ‡¶ø ‡¶®‡¶æ‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶¢‡¶æ‡¶ï‡¶æ, ‡¶Æ‡¶ø‡¶∞‡¶™‡ßÅ‡¶∞, ‡¶Ø‡¶∂‡ßã‡¶∞)‡•§")
					}
				}
				
				if (event.postback) {
					console.log('Received postback:', event.postback.payload)
					handlePostback(event.sender.id, event.postback.payload)
				}
			})
		})
		res.status(200).send('EVENT_RECEIVED')
	} else {
		res.sendStatus(404)
	}
})

// Function to get client name from Facebook
function getClientName(senderId, callback) {
	request({
		url: `https://graph.facebook.com/v2.6/${senderId}`,
		qs: { access_token: token, fields: 'first_name' },
		method: 'GET'
	}, function(error, response, body) {
		if (error) {
			console.log('Error getting user info:', error)
			callback('‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞/‡¶Æ‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶Æ')
		} else {
			try {
				const userInfo = JSON.parse(body)
				callback(userInfo.first_name || '‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞/‡¶Æ‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶Æ')
			} catch (e) {
				console.log('Error parsing user info:', e)
				callback('‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞/‡¶Æ‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶Æ')
			}
		}
	})
}

// Function to send welcome message with client name
function sendWelcomeMessage(sender) {
	getClientName(sender, function(clientName) {
		const welcomeMessage = `‡¶∂‡ßç‡¶∞‡¶¶‡ßç‡¶ß‡ßá‡¶Ø‡¶º ${clientName}! ‡¶Ü‡¶Æ‡¶ø ‡¶∂‡¶ï‡ßç‡¶§‡¶ø, ‡¶∂‡¶ï‡ßç‡¶§‡¶ø ‡¶´‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶™‡¶ï‡ßç‡¶∑ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ‡•§`
		sendTextMessage(sender, welcomeMessage)
		
		// Wait a moment then send the buttons
		setTimeout(() => {
						let messageData = {
				"attachment": {
					"type": "template",
					"payload": {
						"template_type": "button",
						"text": "‡¶Ü‡¶Æ‡¶ø ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?",
						"buttons": [{
							"type": "postback",
							"title": "‡¶ã‡¶£‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶®",
							"payload": "LOAN_INFO"
						}, {
							"type": "postback",
							"title": "‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶®",
							"payload": "SAVINGS_INFO"
						}, {
							"type": "postback",
							"title": "‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø",
							"payload": "COMPLAINT"
						}]
					}
				}
			}
			
			request({
				url: 'https://graph.facebook.com/v2.6/me/messages',
				qs: { access_token: token },
				method: 'POST',
				json: {
					recipient: { id: sender },
					message: messageData
				}
			}, function(error, response, body) {
				if (error) {
					console.log('Error sending buttons:', error)
				} else if (response.body.error) {
					console.log('Error:', response.body.error)
				}
			})
		}, 1000) // Wait 1 second before sending buttons
	})
}

// Function to send text message
function sendTextMessage(sender, text) {
	let messageData = {
		recipient: {
			id: sender
		},
		message: {
			text: text
		}
	}
	
	request({
		url: 'https://graph.facebook.com/v2.6/me/messages',
		qs: { access_token: token },
		method: 'POST',
		json: messageData
	}, function(error, response, body) {
		if (error) {
			console.log('Error sending message:', error)
		} else if (response.body.error) {
			console.log('Error:', response.body.error)
		}
	})
}

// Function to send loan information
function sendLoanInfo(sender) {
	sendTextMessage(sender, "üí∞ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ã‡¶£ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡¶∏‡¶Æ‡ßÇ‡¶π:\n\n" +
		"‡ßß‡•§ ‡¶ú‡¶æ‡¶ó‡¶∞‡¶£ ‡¶≤‡ßã‡¶® ‚Äì ‡¶∏‡¶∞‡ßç‡¶¨‡¶ö‡ßç‡¶ö ‡ß´‡ß¶ ‡¶π‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡ßß‡ß©%, ‡ßß‡ß® ‡¶Æ‡¶æ‡¶∏ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶\n\n" +
		"‡ß®‡•§ ‡¶Ö‡¶ó‡ßç‡¶∞‡¶∏‡¶∞ ‡¶≤‡ßã‡¶® - ‡¶∏‡¶∞‡ßç‡¶¨‡¶ö‡ßç‡¶ö ‡ß´‡ß¶ ‡¶π‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡ßß‡ß©%, ‡ßß‡ß® ‡¶Æ‡¶æ‡¶∏ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶\n\n" +
		"‡ß©‡•§ ‡¶∏‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡¶ø ‡¶≤‡ßã‡¶® - ‡¶∏‡¶∞‡ßç‡¶¨‡¶ö‡ßç‡¶ö ‡ß´‡ß¶ ‡¶π‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡ßß‡ß©%, ‡ßß‡ß® ‡¶Æ‡¶æ‡¶∏ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶\n\n" +
		"‡ß™‡•§ ‡¶∞‡ßá‡¶Æ‡¶ø‡¶ü‡ßá‡¶®‡ßç‡¶∏ ‡¶≤‡ßã‡¶® - ‡¶∏‡¶∞‡ßç‡¶¨‡¶ö‡ßç‡¶ö ‡ß´‡ß¶ ‡¶π‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡ßß‡ß©%, ‡ßß‡ß® ‡¶Æ‡¶æ‡¶∏ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶\n\n" +
		"‡¶Ü‡¶™‡¶®‡¶ø ‡¶≤‡ßã‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞ ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡ßá‡¶≤‡¶æ ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶â‡¶™‡¶ú‡ßá‡¶≤‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®‡•§")
}

// Function to send savings information
function sendSavingsInfo(sender) {
	sendTextMessage(sender, "üíæ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º ‡¶™‡¶£‡ßç‡¶Ø‡¶∏‡¶Æ‡ßÇ‡¶π:\n\n" +
		"‚Ä¢ ‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨: ‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® ‡ßß‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ\n" +
		"‚Ä¢ ‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶Ü‡¶Æ‡¶æ‡¶®‡¶§: ‡ßß,‡ß¶‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ\n" +
		"‚Ä¢ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º: ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø‡ßá\n" +
		"‚Ä¢ ‡¶∂‡¶ø‡¶∂‡ßÅ ‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º: ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶§‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø\n\n" +
		"‡¶∏‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶π‡¶æ‡¶∞: ‡¶¨‡¶õ‡¶∞‡ßá ‡ß©-‡ß¨%\n" +
		"‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø\n\n" +
		"‡¶Ü‡¶∞‡¶ì ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∂‡¶æ‡¶ñ‡¶æ‡¶Ø‡¶º ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
}

// Function to send complaint information
function sendComplaintInfo(sender) {
	sendTextMessage(sender, "üìù ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã‡¶∞ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø:\n\n" +
		"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶ú‡¶æ‡¶®‡¶æ‡¶§‡ßá:\n\n" +
		"üìû ‡¶´‡ßã‡¶®: +‡ßÆ‡ßÆ ‡ß¶‡ßØ‡ß¨‡ßß‡ß©-‡ß™‡ß™‡ß™‡ßß‡ßß‡ßß\n" +
		"üìß ‡¶á‡¶Æ‡ßá‡¶á‡¶≤: info@shakti.org.bd\n" +
		"üåê ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü: www.shakti.org.bd\n\n" +
		"üìç ‡¶π‡ßá‡¶° ‡¶Ö‡¶´‡¶ø‡¶∏:\n" +
		"House 04, Road 1, Block A, Section 11\n" +
		"Mirpur, Pallabi, Dhaka 1216\n\n" +
		"‡¶Ü‡¶Æ‡¶∞‡¶æ ‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ú‡¶æ‡¶®‡¶æ‡¶¨‡ßã‡•§\n" +
		"‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø!")
}

// Function to handle postbacks
function handlePostback(sender, payload) {
	switch(payload) {
		case 'GET_STARTED':
			sendWelcomeMessage(sender)
			break
		case 'LOAN_INFO':
			sendLoanInfo(sender)
			break
		case 'SAVINGS_INFO':
			sendSavingsInfo(sender)
			break
		case 'COMPLAINT':
			sendComplaintInfo(sender)
			break
		default:
			sendTextMessage(sender, '‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶Ö‡¶™‡¶∂‡¶®‡¶ü‡¶ø ‡¶è‡¶ñ‡¶®‡¶ì ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º‡•§')
	}
}

// spin spin sugar
app.listen(app.get('port'), function() {
	console.log('running on port', app.get('port'))
	// Load location data when server starts
	loadLocationData()
})
