'use strict'

const express = require('express')
const bodyParser = require('body-parser')
const request = require('request')
const app = express()

app.set('port', (process.env.PORT || 5000))

// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({extended: false}))

// parse application/json
app.use(bodyParser.json())

// index
app.get('/', function (req, res) {
	res.send('Shakti Foundation Bot is running! ЁЯдЦЁЯТ░')
})

// for facebook verification
app.get('/webhook/', function (req, res) {
	console.log('Webhook verification request received')
	
	if (req.query['hub.mode'] === 'subscribe' && req.query['hub.verify_token'] === 'my_voice_is_my_password_verify_me') {
		console.log('Webhook verified successfully')
		res.status(200).send(req.query['hub.challenge'])
	} else {
		console.log('Webhook verification failed')
		res.status(403).send('Error, wrong token')
	}
})

// to post data
app.post('/webhook/', function (req, res) {
	console.log('Webhook POST received:', JSON.stringify(req.body, null, 2))
	
	if (req.body.object === 'page') {
		req.body.entry.forEach(function(entry) {
			entry.messaging.forEach(function(event) {
				console.log('Processing message from:', event.sender.id)
				
				if (event.message && event.message.text) {
					let text = event.message.text.toLowerCase()
					console.log('Received text:', text)
					
					// Send welcome message with client name
					sendWelcomeMessage(event.sender.id)
				}
				
				if (event.postback) {
					console.log('Received postback:', event.postback.payload)
					handlePostback(event.sender.id, event.postback.payload)
				}
			})
		})
		res.status(200).send('EVENT_RECEIVED')
	} else {
		res.sendStatus(404)
	}
})

// Function to get client name from Facebook
function getClientName(senderId, callback) {
	request({
		url: `https://graph.facebook.com/v2.6/${senderId}`,
		qs: { access_token: token, fields: 'first_name' },
		method: 'GET'
	}, function(error, response, body) {
		if (error) {
			console.log('Error getting user info:', error)
			callback('рж╕рзНржпрж╛рж░/ржорзНржпрж╛ржбрж╛ржо')
		} else {
			try {
				const userInfo = JSON.parse(body)
				callback(userInfo.first_name || 'рж╕рзНржпрж╛рж░/ржорзНржпрж╛ржбрж╛ржо')
			} catch (e) {
				console.log('Error parsing user info:', e)
				callback('рж╕рзНржпрж╛рж░/ржорзНржпрж╛ржбрж╛ржо')
			}
		}
	})
}

// Function to send welcome message with client name
function sendWelcomeMessage(sender) {
	getClientName(sender, function(clientName) {
		const welcomeMessage = `рж╢рзНрж░ржжрзНржзрзЗржпрж╝ ${clientName}! ржЖржорж┐ рж╢ржХрзНрждрж┐, рж╢ржХрзНрждрж┐ ржлрж╛ржЙржирзНржбрзЗрж╢ржирзЗрж░ ржкржХрзНрж╖ ржерзЗржХрзЗ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржоред`
		sendTextMessage(sender, welcomeMessage)
		
		// Wait a moment then send the buttons
		setTimeout(() => {
						let messageData = {
				"attachment": {
					"type": "template",
					"payload": {
						"template_type": "button",
						"text": "ржЖржорж┐ ржХрж┐ржнрж╛ржмрзЗ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?",
						"buttons": [{
							"type": "postback",
							"title": "ржЛржгрзЗрж░ рждржерзНржп ржжрж┐ржи",
							"payload": "LOAN_INFO"
						}, {
							"type": "postback",
							"title": "рж╕ржЮрзНржЪржпрж╝рзЗрж░ рждржерзНржп ржжрж┐ржи",
							"payload": "SAVINGS_INFO"
						}, {
							"type": "postback",
							"title": "ржЕржнрж┐ржпрзЛржЧрзЗрж░ ржЬржирзНржп",
							"payload": "COMPLAINT"
						}]
					}
				}
			}
			
			request({
				url: 'https://graph.facebook.com/v2.6/me/messages',
				qs: { access_token: token },
				method: 'POST',
				json: {
					recipient: { id: sender },
					message: messageData
				}
			}, function(error, response, body) {
				if (error) {
					console.log('Error sending buttons:', error)
				} else if (response.body.error) {
					console.log('Error:', response.body.error)
				}
			})
		}, 1000) // Wait 1 second before sending buttons
	})
}

// Function to send text message
function sendTextMessage(sender, text) {
	let messageData = {
		recipient: {
			id: sender
		},
		message: {
			text: text
		}
	}
	
	request({
		url: 'https://graph.facebook.com/v2.6/me/messages',
		qs: { access_token: token },
		method: 'POST',
		json: messageData
	}, function(error, response, body) {
		if (error) {
			console.log('Error sending message:', error)
		} else if (response.body.error) {
			console.log('Error:', response.body.error)
		}
	})
}

// Function to send loan information
function sendLoanInfo(sender) {
	sendTextMessage(sender, "ЁЯТ░ ржЖржорж╛ржжрзЗрж░ ржЛржг ржкрзНрж░рзЛржбрж╛ржХрзНржЯрж╕ржорзВрж╣:\n\n" +
		"рззред ржЬрж╛ржЧрж░ржг рж▓рзЛржи тАУ рж╕рж░рзНржмржЪрзНржЪ рзлрзж рж╣рж╛ржЬрж╛рж░, рж╕рж╛рж░рзНржнрж┐рж╕ржЪрж╛рж░рзНржЬ рззрзй%, рззрзи ржорж╛рж╕ ржорзЗржпрж╝рж╛ржж\n\n" +
		"рзиред ржЕржЧрзНрж░рж╕рж░ рж▓рзЛржи - рж╕рж░рзНржмржЪрзНржЪ рзлрзж рж╣рж╛ржЬрж╛рж░, рж╕рж╛рж░рзНржнрж┐рж╕ржЪрж╛рж░рзНржЬ рззрзй%, рззрзи ржорж╛рж╕ ржорзЗржпрж╝рж╛ржж\n\n" +
		"рзйред рж╕рзНржпрж╛рж▓рж╛рж░рж┐ рж▓рзЛржи - рж╕рж░рзНржмржЪрзНржЪ рзлрзж рж╣рж╛ржЬрж╛рж░, рж╕рж╛рж░рзНржнрж┐рж╕ржЪрж╛рж░рзНржЬ рззрзй%, рззрзи ржорж╛рж╕ ржорзЗржпрж╝рж╛ржж\n\n" +
		"рзкред рж░рзЗржорж┐ржЯрзЗржирзНрж╕ рж▓рзЛржи - рж╕рж░рзНржмржЪрзНржЪ рзлрзж рж╣рж╛ржЬрж╛рж░, рж╕рж╛рж░рзНржнрж┐рж╕ржЪрж╛рж░рзНржЬ рззрзй%, рззрзи ржорж╛рж╕ ржорзЗржпрж╝рж╛ржж\n\n" +
		"ржЖрж░ржУ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЬрж╛ржирждрзЗ ржЖржорж╛ржжрзЗрж░ ржирж┐ржХржЯрж╕рзНрже рж╢рж╛ржЦрж╛ржпрж╝ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред")
}

// Function to send savings information
function sendSavingsInfo(sender) {
	sendTextMessage(sender, "ЁЯТ╛ ржЖржорж╛ржжрзЗрж░ рж╕ржЮрзНржЪржпрж╝ ржкржгрзНржпрж╕ржорзВрж╣:\n\n" +
		"тАв рж╕ржЮрзНржЪржпрж╝ рж╣рж┐рж╕рж╛ржм: рж╕рж░рзНржмржирж┐ржорзНржи рззрзжрзж ржЯрж╛ржХрж╛\n" +
		"тАв рж╕рзНржерж╛ржпрж╝рзА ржЖржорж╛ржиржд: рзз,рзжрзжрзж ржЯрж╛ржХрж╛ ржерзЗржХрзЗ рж╢рзБрж░рзБ\n" +
		"тАв рж▓ржХрзНрж╖рзНржп рж╕ржЮрзНржЪржпрж╝: ржмрж┐рж╢рзЗрж╖ ржЙржжрзНржжрзЗрж╢рзНржпрзЗ\n" +
		"тАв рж╢рж┐рж╢рзБ рж╕ржЮрзНржЪржпрж╝: ржнржмрж┐рж╖рзНржпрждрзЗрж░ ржЬржирзНржп\n\n" +
		"рж╕рзБржжрзЗрж░ рж╣рж╛рж░: ржмржЫрж░рзЗ рзй-рзм%\n" +
		"ржирж┐рж░рж╛ржкржж ржПржмржВ ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржп\n\n" +
		"ржЖрж░ржУ ржЬрж╛ржирждрзЗ ржЖржорж╛ржжрзЗрж░ рж╢рж╛ржЦрж╛ржпрж╝ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред")
}

// Function to send complaint information
function sendComplaintInfo(sender) {
	sendTextMessage(sender, "ЁЯУЭ ржЕржнрж┐ржпрзЛржЧ ржЬрж╛ржирж╛ржирзЛрж░ ржкржжрзНржзрждрж┐:\n\n" +
		"ржЖржкржирж╛рж░ ржЕржнрж┐ржпрзЛржЧ ржЬрж╛ржирж╛рждрзЗ:\n\n" +
		"ЁЯУЮ ржлрзЛржи: +рзорзо рзжрзпрзмрззрзй-рзкрзкрзкрззрззрзз\n" +
		"ЁЯУз ржЗржорзЗржЗрж▓: info@shakti.org.bd\n" +
		"ЁЯМР ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ: www.shakti.org.bd\n\n" +
		"ЁЯУН рж╣рзЗржб ржЕржлрж┐рж╕:\n" +
		"House 04, Road 1, Block A, Section 11\n" +
		"Mirpur, Pallabi, Dhaka 1216\n\n" +
		"ржЖржорж░рж╛ рзирзк ржШржгрзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржЬрж╛ржирж╛ржмрзЛред\n" +
		"ржзржирзНржпржмрж╛ржж ржЖржкржирж╛рж░ ржорждрж╛ржоржд ржЬрж╛ржирж╛ржирзЛрж░ ржЬржирзНржп!")
}

// Function to handle postbacks
function handlePostback(sender, payload) {
	switch(payload) {
		case 'GET_STARTED':
			sendWelcomeMessage(sender)
			break
		case 'LOAN_INFO':
			sendLoanInfo(sender)
			break
		case 'SAVINGS_INFO':
			sendSavingsInfo(sender)
			break
		case 'COMPLAINT':
			sendComplaintInfo(sender)
			break
		default:
			sendTextMessage(sender, 'ржжрзБржГржЦрж┐ржд, ржПржЗ ржЕржкрж╢ржиржЯрж┐ ржПржЦржиржУ ржЙржкрж▓ржмрзНржз ржиржпрж╝ред')
	}
}

// spin spin sugar
app.listen(app.get('port'), function() {
	console.log('running on port', app.get('port'))
})

// Facebook Page Access Token
const token = 'EAAPKDQxpu94BPKD8cvahCt5b1r01WkSaj6WTZBlSJkfbgoxiZBKL7ExPZAZCVLaNdkfy6ZBXn1c4TWZBpJ0ZA3v5RlrPqpoToGIxFoO0PDcihlROoMr2IZC1CXzxGE0MgQGWjmHUyytOcZAWUSexapMaLEzdzgpJyAKlzExv3J9C3KBcwosEqWmvM6i45UqCohOeoP1z4yMd4tgZDZD'
